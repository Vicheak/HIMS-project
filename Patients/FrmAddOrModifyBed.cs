using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace HIMS_Project.Patients
{
    public partial class FrmAddOrModifyBed : BaseForm
    {
        protected SqlConnection connection = Program.Connection;

        protected DataSet dataSet = new DataSet();

        public SqlDataAdapter bedAdapter;
        public BindingSource bedBindingSource; 
        public bool isAdded = false;

        protected SqlDataAdapter roomTypeAdapter = new SqlDataAdapter();
        protected BindingSource roomTypeBindingSource = new BindingSource(); 

        protected SqlDataAdapter roomAdapter = new SqlDataAdapter();
        protected BindingSource roomBindingSource = new BindingSource(); 

        public FrmAddOrModifyBed()
        {
            InitializeComponent();
            setUpCommand();
            FillData();
            setUpBinding();
        }

        protected void setUpCommand()
        {
            //set up command for tbRoomType
            roomTypeAdapter.SelectCommand = new SqlCommand($"SELECT * FROM {FrmBed.VIEW_ROOM_TYPE_SELECT}",
                this.connection);

            //set up command for tbRoom
            roomAdapter.SelectCommand = new SqlCommand
            {
                CommandText = "spFilterRoomInfo",
                CommandType = CommandType.StoredProcedure,
                Connection = this.connection
            };

            roomAdapter.SelectCommand.Parameters.Add("@roomTypeID", SqlDbType.SmallInt, 0)
                .Direction = ParameterDirection.Input;
        }

        protected void FillData()
        {
            roomTypeAdapter.TableMappings.Add("Table", FrmBed.VIEW_ROOM_TYPE_SELECT);
            roomTypeAdapter.Fill(dataSet);
            roomTypeBindingSource.DataSource = dataSet;
            roomTypeBindingSource.DataMember = FrmBed.VIEW_ROOM_TYPE_SELECT;

            dataSet.Tables.Add(new DataTable(FrmBed.VIEW_ROOM_SELECT));
            roomBindingSource.DataSource = dataSet;
            roomBindingSource.DataMember = FrmBed.VIEW_ROOM_SELECT;
        }

        protected void setUpBinding()
        {
            cbRoomType.DisplayMember = "RoomTypeName";
            cbRoomType.ValueMember = "RoomTypeID";
            cbRoomType.DataSource = roomTypeBindingSource;

            cbRoom.DataSource = roomBindingSource;
            cbRoom.DisplayMember = "RoomNumber";
            cbRoom.ValueMember = "RoomID";
        }

        private void FrmAddOrModifyBed_Load(object sender, EventArgs e)
        {
            if (isAdded)
            {
                //user adds new record
                lblTitle.Text = "Add New Bed Record"; 
            }else
            {
                //user updates existing record
                var currentRow = bedBindingSource.Current as DataRowView;

                lblTitle.Text = $"Modify Bed #{currentRow.Row["BedID"]} Room #{currentRow.Row["RoomNumber"]}";
                lblAutoGeneratedBedID.Text = "";
                txtBedID.Text = currentRow.Row["BedID"].ToString();
                cbRoomType.SelectedValue = Convert.ToInt32(currentRow.Row["RoomTypeID"]);
                cbRoom.SelectedValue = Convert.ToInt32(currentRow.Row["RoomID"]); 
                checkBoxBedStatus.Checked = Convert.ToInt16(currentRow.Row["Status"]) == 1;
                txtBedDesc.Text = currentRow.Row["BedDescription"].ToString().Equals("No Description") ? "" :
                    currentRow.Row["BedDescription"].ToString(); 
            }
        }

        private void cbRoomType_SelectedIndexChanged(object sender, EventArgs e)
        {
            FilterRoomInfo(Convert.ToInt32(cbRoomType.SelectedValue));
        }

        private void FilterRoomInfo(int roomTypeID)
        {
            dataSet.Tables[FrmBed.VIEW_ROOM_SELECT].Clear();

            roomAdapter.SelectCommand.Parameters["@roomTypeID"].Value = roomTypeID;

            roomAdapter.Fill(dataSet, FrmBed.VIEW_ROOM_SELECT);

            if (dataSet.Tables[FrmBed.VIEW_ROOM_SELECT].Rows.Count == 0)
            {
                cbRoom.DataSource = null;
                if ((string)cbRoom.SelectedItem != "N/A")
                    cbRoom.Items.Add("N/A");
                cbRoom.SelectedItem = "N/A";
            }
            else
            {
                cbRoom.DataSource = roomBindingSource;
                cbRoom.DisplayMember = "RoomNumber";
                cbRoom.ValueMember = "RoomID";
            }
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            bedBindingSource.CancelEdit(); 

            this.Close();            
        }

        private void btnSave_Click(object sender, EventArgs e)
        {
            btnSave_Click(sender, e, txtBedDesc);
        }

        private void btnSave_Click(object sender, EventArgs e, TextBox txtBedDesc)
        {
            //validate
            if (cbRoom.SelectedValue == null)
            {
                MessageBox.Show("Please select any room!", "Warning",
                  MessageBoxButtons.OK, MessageBoxIcon.Warning);
                cbRoom.Focus(); 
                return;
            }

            var descriptionValue = new object();
            if (string.IsNullOrWhiteSpace(txtBedDesc.Text))
                descriptionValue = DBNull.Value;
            else descriptionValue = txtBedDesc.Text;

            if (this.isAdded)
            {
                bedBindingSource.AddNew();

                var currentRow = bedBindingSource.Current as DataRowView;

                currentRow.Row.ItemArray = new object[]
                {
                   DBNull.Value,
                   descriptionValue, 
                   checkBoxBedStatus.Checked ? 1 : 0,
                   checkBoxBedStatus.Checked ? "Available" : "Unavailable",
                   Convert.ToInt32(cbRoom.SelectedValue),
                   cbRoom.Text,
                   Convert.ToInt32(cbRoomType.SelectedValue)
                };
            }
            else
            {
                var currentRow = bedBindingSource.Current as DataRowView;
                currentRow.Row.ItemArray = new object[]
                {
                   txtBedID.Text,
                   descriptionValue,
                   checkBoxBedStatus.Checked ? 1 : 0,
                   checkBoxBedStatus.Checked ? "Available" : "Unavailable",
                   Convert.ToInt32(cbRoom.SelectedValue),
                   cbRoom.Text,
                   Convert.ToInt32(cbRoomType.SelectedValue)
                }; 
            }

            //close the form itself
            this.DialogResult = DialogResult.OK;
        }
    }
}